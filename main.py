import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from scraper import check_fines
from scheduler import start_scheduler

API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

TRACK_FILE = "tracked.json"

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("üëã –û—Ç–ø—Ä–∞–≤—å—Ç–µ: /fines –ù–û–ú–ï–† –¢–ï–•–ü–ê–°–ü–û–†–¢ [media:on]")

@dp.message_handler(commands=["fines"])
async def fines_cmd(message: types.Message):
    args = message.text.split()
    if len(args) < 3:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /fines –ù–û–ú–ï–† –¢–ï–•–ü–ê–°–ü–û–†–¢ [media:on]")
        return
    car_num, tech_pass = args[1], args[2]
    include_media = "media:on" in message.text
    fines = check_fines(car_num, tech_pass, include_media)
    if not fines:
        await message.answer("‚úÖ –®—Ç—Ä–∞—Ñ–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    for fine in fines:
        await message.answer(fine)

@dp.message_handler(commands=["track_add"])
async def track_add(message: types.Message):
    args = message.text.split()
    if len(args) < 3:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /track_add –ù–û–ú–ï–† –¢–ï–•–ü–ê–°–ü–û–†–¢")
        return
    car, passport = args[1], args[2]
    user_id = message.from_user.id
    try:
        with open(TRACK_FILE, "r") as f:
            tracked = json.load(f)
    except:
        tracked = {}
    tracked[car] = {"passport": passport, "user_id": user_id}
    with open(TRACK_FILE, "w") as f:
        json.dump(tracked, f)
    await message.answer(f"‚úÖ `{car}` –¥–æ–±–∞–≤–ª–µ–Ω–æ.", parse_mode="Markdown")

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    await start_scheduler(bot)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await executor.start(dp)

# –í–º–µ—Å—Ç–æ asyncio.run() –≤—ã–∑—ã–≤–∞–µ–º main() –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ —Å—Ä–µ–¥–∞ —É–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞ —Ü–∏–∫–ª
if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            # –ï—Å–ª–∏ —Ü–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º main() –∫–∞–∫ –∑–∞–¥–∞—á—É
            loop.create_task(main())
        else:
            # –ï—Å–ª–∏ —Ü–∏–∫–ª –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            asyncio.run(main())
    except RuntimeError:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫, –∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ asyncio.run()
        asyncio.run(main())
